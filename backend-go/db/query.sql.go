// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkFormAccess = `-- name: CheckFormAccess :one
SELECT forms.ID
FROM forms
INNER JOIN workspaces
ON forms.workspace_id = workspaces.ID
WHERE forms.ID = $1 AND workspaces.user_id = $2
`

type CheckFormAccessParams struct {
	ID     int32
	UserID pgtype.UUID
}

func (q *Queries) CheckFormAccess(ctx context.Context, arg CheckFormAccessParams) (int32, error) {
	row := q.db.QueryRow(ctx, checkFormAccess, arg.ID, arg.UserID)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteFormElements = `-- name: DeleteFormElements :exec
DELETE FROM form_elements WHERE form_id = $1
`

func (q *Queries) DeleteFormElements(ctx context.Context, formID int32) error {
	_, err := q.db.Exec(ctx, deleteFormElements, formID)
	return err
}

const getAnalyticsFormSubmissions = `-- name: GetAnalyticsFormSubmissions :many
SELECT submission_elements.ID, form_submission_id, data, form_elements.type FROM submission_elements
INNER JOIN form_submissions ON form_submission_id = form_submissions.ID
INNER JOIN form_elements ON submission_elements.element_id = form_elements.ID
INNER JOIN forms ON form_submissions.form_id = forms.ID
INNER JOIN workspaces ON forms.workspace_id = workspaces.ID
INNER JOIN users ON workspaces.user_id = users.ID
WHERE forms.ID = $1
AND users.ID = $2
`

type GetAnalyticsFormSubmissionsParams struct {
	ID   int32
	ID_2 pgtype.UUID
}

type GetAnalyticsFormSubmissionsRow struct {
	ID               int32
	FormSubmissionID int32
	Data             []byte
	Type             FormElementTypes
}

func (q *Queries) GetAnalyticsFormSubmissions(ctx context.Context, arg GetAnalyticsFormSubmissionsParams) ([]GetAnalyticsFormSubmissionsRow, error) {
	rows, err := q.db.Query(ctx, getAnalyticsFormSubmissions, arg.ID, arg.ID_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAnalyticsFormSubmissionsRow
	for rows.Next() {
		var i GetAnalyticsFormSubmissionsRow
		if err := rows.Scan(
			&i.ID,
			&i.FormSubmissionID,
			&i.Data,
			&i.Type,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFormDataAndElements = `-- name: GetFormDataAndElements :many
SELECT
	-- form
	forms.ID,
	forms.title,
	forms.created_at,
	forms.updated_at,
	forms.status,
	forms.design,
	-- workspace
	workspaces.ID,
	workspaces.name,
	workspaces.created_at,
	workspaces.updated_at,
	-- user
	workspaces.user_id,
	-- form elements (null values, due to left outer join)
	form_elements.seq_number,
	form_elements.type,
	form_elements.label,
	form_elements.description,
	form_elements.properties,
	form_elements.required
FROM
	forms
INNER JOIN
	workspaces
ON
	forms.workspace_id = workspaces.ID
LEFT OUTER JOIN
	form_elements
ON
	form_elements.form_id = forms.ID
WHERE
	forms.ID = $1
AND
	workspaces.user_id = $2
ORDER BY
	form_elements.form_id, form_elements.seq_number
`

type GetFormDataAndElementsParams struct {
	ID     int32
	UserID pgtype.UUID
}

type GetFormDataAndElementsRow struct {
	ID          int32
	Title       string
	CreatedAt   pgtype.Timestamptz
	UpdatedAt   pgtype.Timestamptz
	Status      FormStatusType
	Design      []byte
	ID_2        int32
	Name        string
	CreatedAt_2 pgtype.Timestamptz
	UpdatedAt_2 pgtype.Timestamptz
	UserID      pgtype.UUID
	SeqNumber   pgtype.Int4
	Type        NullFormElementTypes
	Label       pgtype.Text
	Description pgtype.Text
	Properties  []byte
	Required    pgtype.Bool
}

func (q *Queries) GetFormDataAndElements(ctx context.Context, arg GetFormDataAndElementsParams) ([]GetFormDataAndElementsRow, error) {
	rows, err := q.db.Query(ctx, getFormDataAndElements, arg.ID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFormDataAndElementsRow
	for rows.Next() {
		var i GetFormDataAndElementsRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Status,
			&i.Design,
			&i.ID_2,
			&i.Name,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.UserID,
			&i.SeqNumber,
			&i.Type,
			&i.Label,
			&i.Description,
			&i.Properties,
			&i.Required,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFormDataPublic = `-- name: GetFormDataPublic :many
SELECT
	forms.ID,
	forms.title,
	forms.created_at,
	forms.updated_at,
	forms.status,
	forms.design,
	el.type,
	el.seq_number,
	el.label,
	el.description,
	el.created_at,
	el.updated_at,
	el.properties,
	el.required
FROM
	forms
INNER JOIN
	form_elements AS el
ON
	forms.ID = el.form_id
WHERE
	public_id = $1
AND
	forms.status = 'published'
`

type GetFormDataPublicRow struct {
	ID          int32
	Title       string
	CreatedAt   pgtype.Timestamptz
	UpdatedAt   pgtype.Timestamptz
	Status      FormStatusType
	Design      []byte
	Type        FormElementTypes
	SeqNumber   int32
	Label       pgtype.Text
	Description pgtype.Text
	CreatedAt_2 pgtype.Timestamptz
	UpdatedAt_2 pgtype.Timestamptz
	Properties  []byte
	Required    bool
}

// the published form cannot contain no element thus inner join
func (q *Queries) GetFormDataPublic(ctx context.Context, publicID pgtype.UUID) ([]GetFormDataPublicRow, error) {
	rows, err := q.db.Query(ctx, getFormDataPublic, publicID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFormDataPublicRow
	for rows.Next() {
		var i GetFormDataPublicRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Status,
			&i.Design,
			&i.Type,
			&i.SeqNumber,
			&i.Label,
			&i.Description,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.Properties,
			&i.Required,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFormsInWorkspace = `-- name: GetFormsInWorkspace :many
SELECT id, title, created_at, updated_at, workspace_id, public_id, status, design FROM forms WHERE workspace_id = $1 ORDER BY forms.updated_at DESC, forms.created_at ASC
`

func (q *Queries) GetFormsInWorkspace(ctx context.Context, workspaceID int32) ([]Form, error) {
	rows, err := q.db.Query(ctx, getFormsInWorkspace, workspaceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Form
	for rows.Next() {
		var i Form
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.WorkspaceID,
			&i.PublicID,
			&i.Status,
			&i.Design,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPublicIDForm = `-- name: GetPublicIDForm :one
SELECT public_id FROM forms WHERE ID = $1 AND status = 'published'
`

func (q *Queries) GetPublicIDForm(ctx context.Context, id int32) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, getPublicIDForm, id)
	var public_id pgtype.UUID
	err := row.Scan(&public_id)
	return public_id, err
}

const getWorkspaceByID = `-- name: GetWorkspaceByID :one
SELECT id, name, created_at, updated_at, deleted_at, user_id FROM workspaces WHERE ID = $1 AND workspaces.user_id = $2
`

type GetWorkspaceByIDParams struct {
	ID     int32
	UserID pgtype.UUID
}

func (q *Queries) GetWorkspaceByID(ctx context.Context, arg GetWorkspaceByIDParams) (Workspace, error) {
	row := q.db.QueryRow(ctx, getWorkspaceByID, arg.ID, arg.UserID)
	var i Workspace
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.UserID,
	)
	return i, err
}

const getWorkspacesForUser = `-- name: GetWorkspacesForUser :many
SELECT ID, name, created_at, updated_at FROM workspaces WHERE user_id = $1
`

type GetWorkspacesForUserRow struct {
	ID        int32
	Name      string
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
}

func (q *Queries) GetWorkspacesForUser(ctx context.Context, userID pgtype.UUID) ([]GetWorkspacesForUserRow, error) {
	rows, err := q.db.Query(ctx, getWorkspacesForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetWorkspacesForUserRow
	for rows.Next() {
		var i GetWorkspacesForUserRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFormDesign = `-- name: UpdateFormDesign :exec
UPDATE forms SET design = $1 WHERE ID = $2
`

type UpdateFormDesignParams struct {
	Design []byte
	ID     int32
}

func (q *Queries) UpdateFormDesign(ctx context.Context, arg UpdateFormDesignParams) error {
	_, err := q.db.Exec(ctx, updateFormDesign, arg.Design, arg.ID)
	return err
}
