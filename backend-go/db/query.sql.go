// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getFormDataAndElements = `-- name: GetFormDataAndElements :many
SELECT
	-- form
	forms.ID,
	forms.title,
	forms.created_at,
	forms.updated_at,
	-- workspace
	workspaces.ID,
	workspaces.name,
	workspaces.created_at,
	workspaces.updated_at,
	-- user
	workspaces.user_id,
	-- form elements (null values, due to left outer join)
	form_elements.ID,
	form_elements.element_type,
	form_elements.label,
	form_elements.description
FROM
	forms
INNER JOIN
	workspaces
ON
	forms.workspace_id = workspaces.ID
LEFT OUTER JOIN
	form_elements
ON
	form_elements.form_id = forms.ID
WHERE
	forms.ID = $1
AND
	workspaces.user_id = $2
ORDER BY
	form_elements.ID
`

type GetFormDataAndElementsParams struct {
	ID     int32
	UserID int32
}

type GetFormDataAndElementsRow struct {
	ID          int32
	Title       string
	CreatedAt   pgtype.Timestamp
	UpdatedAt   pgtype.Timestamp
	ID_2        int32
	Name        string
	CreatedAt_2 pgtype.Timestamp
	UpdatedAt_2 pgtype.Timestamp
	UserID      int32
	ID_3        pgtype.Int4
	ElementType NullFormElementTypes
	Label       pgtype.Text
	Description pgtype.Text
}

func (q *Queries) GetFormDataAndElements(ctx context.Context, arg GetFormDataAndElementsParams) ([]GetFormDataAndElementsRow, error) {
	rows, err := q.db.Query(ctx, getFormDataAndElements, arg.ID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFormDataAndElementsRow
	for rows.Next() {
		var i GetFormDataAndElementsRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ID_2,
			&i.Name,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.UserID,
			&i.ID_3,
			&i.ElementType,
			&i.Label,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFormsInWorkspace = `-- name: GetFormsInWorkspace :many
SELECT id, title, created_at, updated_at, workspace_id FROM forms WHERE workspace_id = $1
`

func (q *Queries) GetFormsInWorkspace(ctx context.Context, workspaceID int32) ([]Form, error) {
	rows, err := q.db.Query(ctx, getFormsInWorkspace, workspaceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Form
	for rows.Next() {
		var i Form
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.WorkspaceID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWorkspaceByID = `-- name: GetWorkspaceByID :one
SELECT id, name, created_at, updated_at, user_id FROM workspaces WHERE ID = $1 AND workspaces.user_id = $2
`

type GetWorkspaceByIDParams struct {
	ID     int32
	UserID int32
}

func (q *Queries) GetWorkspaceByID(ctx context.Context, arg GetWorkspaceByIDParams) (Workspace, error) {
	row := q.db.QueryRow(ctx, getWorkspaceByID, arg.ID, arg.UserID)
	var i Workspace
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}

const getWorkspacesForUser = `-- name: GetWorkspacesForUser :many
SELECT ID, name, created_at, updated_at FROM workspaces WHERE user_id = $1
`

type GetWorkspacesForUserRow struct {
	ID        int32
	Name      string
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
}

func (q *Queries) GetWorkspacesForUser(ctx context.Context, userID int32) ([]GetWorkspacesForUserRow, error) {
	rows, err := q.db.Query(ctx, getWorkspacesForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetWorkspacesForUserRow
	for rows.Next() {
		var i GetWorkspacesForUserRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
