// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: batch.go

package db

import (
	"context"
	"errors"

	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgtype"
)

var (
	ErrBatchAlreadyClosed = errors.New("batch already closed")
)

const addFormElementsBatched = `-- name: AddFormElementsBatched :batchexec
INSERT INTO form_elements (
	type, label, seq_number, description, form_id, properties
) VALUES (
	$2, $3, $4, $5, $1, $6
)
`

type AddFormElementsBatchedBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type AddFormElementsBatchedParams struct {
	FormID      int32
	Type        FormElementTypes
	Label       pgtype.Text
	SeqNumber   int32
	Description pgtype.Text
	Properties  []byte
}

func (q *Queries) AddFormElementsBatched(ctx context.Context, arg []AddFormElementsBatchedParams) *AddFormElementsBatchedBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.FormID,
			a.Type,
			a.Label,
			a.SeqNumber,
			a.Description,
			a.Properties,
		}
		batch.Queue(addFormElementsBatched, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &AddFormElementsBatchedBatchResults{br, len(arg), false}
}

func (b *AddFormElementsBatchedBatchResults) Exec(f func(int, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		if b.closed {
			if f != nil {
				f(t, ErrBatchAlreadyClosed)
			}
			continue
		}
		_, err := b.br.Exec()
		if f != nil {
			f(t, err)
		}
	}
}

func (b *AddFormElementsBatchedBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}
