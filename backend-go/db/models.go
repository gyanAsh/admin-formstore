// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type FormElementTypes string

const (
	FormElementTypesWebsite     FormElementTypes = "website"
	FormElementTypesConsent     FormElementTypes = "consent"
	FormElementTypesMultiselect FormElementTypes = "multiselect"
	FormElementTypesDropdown    FormElementTypes = "dropdown"
	FormElementTypesRanking     FormElementTypes = "ranking"
	FormElementTypesRating      FormElementTypes = "rating"
	FormElementTypesDate        FormElementTypes = "date"
	FormElementTypesText        FormElementTypes = "text"
	FormElementTypesPhone       FormElementTypes = "phone"
	FormElementTypesEmail       FormElementTypes = "email"
)

func (e *FormElementTypes) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = FormElementTypes(s)
	case string:
		*e = FormElementTypes(s)
	default:
		return fmt.Errorf("unsupported scan type for FormElementTypes: %T", src)
	}
	return nil
}

type NullFormElementTypes struct {
	FormElementTypes FormElementTypes
	Valid            bool // Valid is true if FormElementTypes is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullFormElementTypes) Scan(value interface{}) error {
	if value == nil {
		ns.FormElementTypes, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.FormElementTypes.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullFormElementTypes) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.FormElementTypes), nil
}

type FormStatusType string

const (
	FormStatusTypeDraft     FormStatusType = "draft"
	FormStatusTypePublished FormStatusType = "published"
	FormStatusTypeCompleted FormStatusType = "completed"
)

func (e *FormStatusType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = FormStatusType(s)
	case string:
		*e = FormStatusType(s)
	default:
		return fmt.Errorf("unsupported scan type for FormStatusType: %T", src)
	}
	return nil
}

type NullFormStatusType struct {
	FormStatusType FormStatusType
	Valid          bool // Valid is true if FormStatusType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullFormStatusType) Scan(value interface{}) error {
	if value == nil {
		ns.FormStatusType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.FormStatusType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullFormStatusType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.FormStatusType), nil
}

type Form struct {
	ID          int32
	Title       string
	CreatedAt   pgtype.Timestamp
	UpdatedAt   pgtype.Timestamp
	WorkspaceID int32
	Status      FormStatusType
}

type FormElement struct {
	Type        FormElementTypes
	SeqNumber   int32
	Label       pgtype.Text
	Description pgtype.Text
	CreatedAt   pgtype.Timestamp
	UpdatedAt   pgtype.Timestamp
	FormID      int32
	Properties  []byte
}

type User struct {
	ID       pgtype.UUID
	Username string
	Email    string
	Password string
}

type Workspace struct {
	ID        int32
	Name      string
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
	DeletedAt pgtype.Timestamp
	UserID    pgtype.UUID
}
