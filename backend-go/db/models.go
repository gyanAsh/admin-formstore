// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type FormElementTypes string

const (
	FormElementTypesWelcome      FormElementTypes = "welcome"
	FormElementTypesExit         FormElementTypes = "exit"
	FormElementTypesWebsite      FormElementTypes = "website"
	FormElementTypesNumber       FormElementTypes = "number"
	FormElementTypesAddress      FormElementTypes = "address"
	FormElementTypesConsent      FormElementTypes = "consent"
	FormElementTypesMultiselect  FormElementTypes = "multiselect"
	FormElementTypesSingleselect FormElementTypes = "singleselect"
	FormElementTypesDropdown     FormElementTypes = "dropdown"
	FormElementTypesRanking      FormElementTypes = "ranking"
	FormElementTypesRating       FormElementTypes = "rating"
	FormElementTypesDate         FormElementTypes = "date"
	FormElementTypesText         FormElementTypes = "text"
	FormElementTypesLongtext     FormElementTypes = "longtext"
	FormElementTypesPhone        FormElementTypes = "phone"
	FormElementTypesEmail        FormElementTypes = "email"
	FormElementTypesBoolean      FormElementTypes = "boolean"
	FormElementTypesNps          FormElementTypes = "nps"
)

func (e *FormElementTypes) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = FormElementTypes(s)
	case string:
		*e = FormElementTypes(s)
	default:
		return fmt.Errorf("unsupported scan type for FormElementTypes: %T", src)
	}
	return nil
}

type NullFormElementTypes struct {
	FormElementTypes FormElementTypes
	Valid            bool // Valid is true if FormElementTypes is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullFormElementTypes) Scan(value interface{}) error {
	if value == nil {
		ns.FormElementTypes, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.FormElementTypes.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullFormElementTypes) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.FormElementTypes), nil
}

type FormStatusType string

const (
	FormStatusTypeDraft     FormStatusType = "draft"
	FormStatusTypePublished FormStatusType = "published"
	FormStatusTypeCompleted FormStatusType = "completed"
)

func (e *FormStatusType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = FormStatusType(s)
	case string:
		*e = FormStatusType(s)
	default:
		return fmt.Errorf("unsupported scan type for FormStatusType: %T", src)
	}
	return nil
}

type NullFormStatusType struct {
	FormStatusType FormStatusType
	Valid          bool // Valid is true if FormStatusType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullFormStatusType) Scan(value interface{}) error {
	if value == nil {
		ns.FormStatusType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.FormStatusType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullFormStatusType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.FormStatusType), nil
}

type Form struct {
	ID          int32
	Title       string
	CreatedAt   pgtype.Timestamptz
	UpdatedAt   pgtype.Timestamptz
	WorkspaceID int32
	PublicID    pgtype.UUID
	Status      FormStatusType
	Design      []byte
}

type FormElement struct {
	ID          int32
	Type        FormElementTypes
	SeqNumber   int32
	Label       pgtype.Text
	Required    bool
	Description pgtype.Text
	CreatedAt   pgtype.Timestamptz
	UpdatedAt   pgtype.Timestamptz
	FormID      int32
	Properties  []byte
}

type FormSubmission struct {
	ID        int32
	FormID    int32
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
	UserID    pgtype.Int4
}

type SubmissionEntry struct {
	ID               int32
	FormSubmissionID int32
	ElementID        int32
	Data             string
}

type User struct {
	ID       pgtype.UUID
	Username string
	Email    string
	Password string
}

type Workspace struct {
	ID        int32
	Name      string
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
	DeletedAt pgtype.Timestamptz
	UserID    pgtype.UUID
}
